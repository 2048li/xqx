# PPStack.pm
#
# This is a post-processing module that uses the stackusage information in 
# full.graph to alter the output graph generated by gengraph appropriately
# See the usage function for the options

package CodeViz::PPStack;
require Exporter;
use vars qw (@ISA @EXPORT);
use strict;
use CodeViz::Graph;
use CodeViz::Format;
no strict 'refs';

@ISA =    qw(Exporter);
@EXPORT = qw(&PPStack);

sub usage() {
  print <<EOF;

The supported options for the Stack postprocessing are:

  showstack          Boolean, will show the stack usage in the label
  largestack=[value] Highlight nodes which use more stack then value

EOF
  exit;
}

sub PPStack {
  my ($options, $dag) = @_;
  my ($showstack, $largestack);
  my ($param, $value);
  my $func;
  my $option;
  if ($options eq 'help') { usage(); }

  printverbose("Post-Processing: Stack usage");

  # Add a , if necessary to help parsing
  if ($options !~ /.*=.*,/) { $options .= ","; }

  # Parse all options.
  foreach $option (split /,/, $options) {
    ($param, $value) = split /=/, $option;
    if ($param eq "showstack")  { $showstack = 1; next; }
    if ($param eq "largestack") { $largestack = $value; next; }

    # Unknown option, show usage
    usage();
  }

  # Process the full graph
  foreach $func (keys %$dag) {

    # Get the node label and stack usage information
    my $label = getNodeAttribute("label",    \$$dag{$func});
    my $stack = getNodeAttribute("stackuse", \$$dag{$func});

    # Skip if no stack information is available
    if ($stack eq "") { next; }

    # Add the stack usage to the label if requested
    if ($showstack) {
      if ($label ne "") { $label .= "\\nstackuse=$stack"; }
      else              { $label =  "$func\\nstackuse=$stack"; }
      setNodeAttribute("label", $label, \$$dag{$func});

    }

    # Fill in nodes with red if they use too much stack
    if ($largestack != 0  && $stack >= $largestack) {
      setNodeAttribute("fillcolor", "#F00000", \$$dag{$func});
      setNodeAttribute("style",    "filled",  \$$dag{$func});
    }
      
  }

}

1;
